/**
 * @file MowerTypes.h
 * @brief Type definitions and enumerations for the autonomous mower system.
 * 
 * This file contains all the core types, enums, and forward declarations used
 * throughout the mower control system. It serves as a central place for type
 * definitions to avoid circular dependencies.
 */

#ifndef MOWER_TYPES_H
#define MOWER_TYPES_H

/**
 * @enum State
 * @brief Enumeration of all possible states of the mower state machine.
 * 
 * These states represent the different operational modes and conditions
 * that the mower can be in during its operation.
 */
enum class State {
    IDLE,               // In attesa di comandi
    MOWING,             // Taglio dell'erba in corso
    DOCKING,            // Ritorno alla base di ricarica
    UNDOCKING,          // Uscita dalla base di ricarica
    CHARGING,           // Ricarica in corso
    MANUAL_CONTROL,     // Controllo manuale attivo
    EMERGENCY_STOP,     // Arresto di emergenza attivo
    BORDER_DETECTED,    // Rilevato bordo dell'area di taglio
    LIFTED,             // Tosaerba sollevato da terra
    TESTING,            // Modalità test
    PAUSED,             // Pausa temporanea del taglio
    SLEEP,              // Modalità risparmio energetico
    RAIN_DELAY,         // Pausa per pioggia
    MAINTENANCE_NEEDED, // Manutenzione richiesta
    ROS_CONTROL,        // Controllo da ROS (Robot Operating System)
    ERROR               // Stato di errore
};

/**
 * @enum Event
 * @brief Enumeration of all possible events that can trigger state transitions.
 * 
 * These events are generated by the system in response to sensor inputs,
 * user commands, or internal conditions, and are used to trigger state
 * transitions in the mower's state machine.
 */
enum class Event {
    // ===== Comandi utente =====
    START_MOWING,           // Avvia il taglio
    STOP_MOWING,            // Ferma il taglio
    START_DOCKING,          // Inizia il docking
    PAUSE,                  // Mette in pausa
    RESUME,                 // Riprende dallo stato di pausa
    EMERGENCY_STOP,         // Arresto di emergenza
    MANUAL_CONTROL_ENABLED, // Abilita controllo manuale
    MANUAL_CONTROL_DISABLED,// Disabilita controllo manuale
    BUTTON_PRESSED,         // Pulsante premuto
    RESET,                  // Reset del sistema
    
    // ===== Eventi sensori =====
    BORDER_DETECTED,        // Rilevato bordo
    LIFT_DETECTED,          // Rilevato sollevamento
    LIFT_RESOLVED,          // Tosaerba rimesso a terra
    PLACED_ON_GROUND,       // Tosaerba posizionato a terra
    RAIN_DETECTED,          // Rilevata pioggia
    OBSTACLE_DETECTED,      // Rilevato ostacolo
    OBSTACLE_AVOIDED,       // Ostacolo evitato
    BORDER_AVOIDED,         // Bordo evitato
    DOCK_DETECTED,          // Rilevato aggancio alla base
    UNDOCK_DETECTED,        // Rilevato sgancio dalla base
    LOST_SIGNAL,            // Segnale perso
    SIGNAL_RESTORED,        // Segnale ripristinato
    
    // ===== Eventi batteria =====
    BATTERY_LOW,            // Batteria bassa
    BATTERY_CRITICAL,       // Batteria critica
    BATTERY_FULL,           // Batteria piena
    BATTERY_CHARGED,        // Batteria completamente carica
    BATTERY_CHARGING,       // Batteria in carica
    BATTERY_DISCHARGING,    // Batteria in scarica
    
    // ===== Eventi di ricarica =====
    CHARGING_STARTED,       // Inizio della ricarica
    CHARGING_STOPPED,       // Fine della ricarica
    CHARGING_COMPLETE,      // Carica completata
    CHARGING_ERROR,         // Errore durante la ricarica
    
    // ===== Eventi di navigazione =====
    DOCKING,                // Inizio del docking
    DOCKING_COMPLETE,       // Docking completato con successo
    DOCKING_FAILED,         // Docking fallito
    UNDOCKING,              // Inizio dell'undocking
    UNDOCKING_COMPLETE,     // Undocking completato con successo
    
    // ===== Eventi di sistema =====
    EMERGENCY_STOP_PRESSED, // Pulsante di emergenza premuto
    EMERGENCY_STOP_RELEASED,// Pulsante di emergenza rilasciato
    MAINTENANCE_REQUIRED,   // Manutenzione richiesta
    MAINTENANCE_COMPLETE,   // Manutenzione completata
    RAIN_DELAY_START,       // Inizio ritardo pioggia
    RAIN_DELAY_END,         // Fine ritardo pioggia
    SLEEP_MODE,             // Entra in modalità risparmio energetico
    WAKE_UP,                // Esci dalla modalità risparmio energetico
    DAILY_WORK_LIMIT_REACHED, // Raggiunto limite di 8 ore di lavoro
    TEST_COMPLETED,         // Test completato
    USER_INTERACTION,       // Interazione utente rilevata
    TIMER_EXPIRED,          // Timer scaduto
    MOTOR_ERROR,            // Errore motore
    SENSOR_ERROR,           // Errore sensore
    SYSTEM_ERROR,           // Errore di sistema
    ERROR_DETECTED,         // Errore generico rilevato
    ERROR_CLEARED           // Errore risolto
};

/**
 * @enum NavigationMode
 * @brief Enumeration of different navigation strategies the mower can use.
 * 
 * These modes define how the mower moves around the mowing area, each
 * optimized for different scenarios or patterns.
 */
enum class NavigationMode {
    RANDOM,             // Navigazione casuale
    SPIRAL,             // Navigazione a spirale
    LAWN_MOWER,         // Navigazione a strisce (tosaerba)
    BORDER,             // Navigazione lungo il perimetro
    DOCKING,            // Navigazione verso la stazione di ricarica
    UNDOCKING,          // Uscita dalla stazione di ricarica
    MANUAL,             // Controllo manuale
    FOLLOW_BORDER,      // Segue il bordo dell'area di taglio
    SPOT,               // Taglio in un'area circolare
    ZONE,               // Taglio in un'area rettangolare definita
    POINT_TO_POINT,     // Navigazione da punto a punto
    PATH_FOLLOWING,     // Segue un percorso predefinito
    OBSTACLE_AVOIDANCE, // Navigazione con evitamento ostacoli
    RETURN_TO_HOME,     // Ritorno alla base
    PAUSE,              // Navigazione in pausa
    STOP,               // Navigazione ferma
    ERROR               // Stato di errore nella navigazione
};

// Forward declarations (documented in their respective headers)

/**
 * @class Mower
 * @brief Main controller class for the autonomous mower system.
 * 
 * Forward declaration of the Mower class which serves as the central
 * controller for the autonomous mower.
 */
class Mower;

/**
 * @class MowerState
 * @brief Base class for all mower states in the state machine.
 * 
 * Forward declaration of the MowerState base class that defines the interface
 * for all concrete state implementations.
 */
class MowerState;

#endif // MOWER_TYPES_H
